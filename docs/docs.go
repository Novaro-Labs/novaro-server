// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/api/comments/add": {
            "post": {
                "description": "Add a new comment to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Add a new comment",
                "parameters": [
                    {
                        "description": "Comment object",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CommentsApi"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/api/comments/delete": {
            "delete": {
                "description": "Deletes a comment from the database based on the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Delete a comment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/api/comments/getCommentsListByParentId": {
            "get": {
                "description": "Get a list of child comments for a specific parent comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by parent ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Parent Comment ID",
                        "name": "parentId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Comments"
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/api/comments/getCommentsListByPostId": {
            "get": {
                "description": "Get a list of comments for a specific post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by post ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Comments"
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/api/comments/getCommentsListByUserId": {
            "get": {
                "description": "Get a list of comments made by a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Comments"
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/api/invitation/codes/add": {
            "get": {
                "description": "Generate new invitation codes and save to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Generate new invitation codes",
                "responses": {
                    "200": {
                        "description": " Successfully generated and saved invitation codes"
                    },
                    "500": {
                        "description": " Error generating and adding invitation codes"
                    }
                }
            }
        },
        "/v1/api/tags/list": {
            "get": {
                "description": "Retrieve a list of all tags",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Get list of tags",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Tags"
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/api/tags/records/add": {
            "post": {
                "description": "Add new tags records to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags-records"
                ],
                "summary": "Add new tags records",
                "parameters": [
                    {
                        "description": "Tags records to add",
                        "name": "tagsRecords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TagsRecordsApi"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added tags records"
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "api.CommentsApi": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "api.TagsRecordsApi": {
            "type": "object",
            "properties": {
                "postId": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.Comments": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Comments"
                    }
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.Users"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.Imgs": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "sourceId": {
                    "type": "string"
                }
            }
        },
        "model.NftInfo": {
            "type": "object",
            "properties": {
                "createAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "level": {
                    "type": "integer"
                },
                "nft": {
                    "$ref": "#/definitions/model.NftLevel"
                },
                "points": {
                    "type": "number"
                },
                "wallet": {
                    "type": "string"
                }
            }
        },
        "model.NftLevel": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "left": {
                    "type": "integer"
                },
                "level": {
                    "type": "string"
                },
                "right": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.Posts": {
            "type": "object",
            "properties": {
                "Imgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Imgs"
                    }
                },
                "comments": {
                    "$ref": "#/definitions/model.Comments"
                },
                "commentsAmount": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isLike": {
                    "type": "boolean"
                },
                "likesAmount": {
                    "type": "integer"
                },
                "originalId": {
                    "type": "string"
                },
                "repostsAmount": {
                    "type": "integer"
                },
                "sourceId": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.Users"
                },
                "userId": {
                    "type": "string"
                },
                "viewAmount": {
                    "type": "integer"
                }
            }
        },
        "model.Tags": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Posts"
                    }
                },
                "sourceId": {
                    "type": "string"
                }
            }
        },
        "model.Users": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "creditScore": {
                    "type": "number"
                },
                "followers": {
                    "type": "integer"
                },
                "following": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invitationCode": {
                    "type": "string"
                },
                "lastLogin": {
                    "type": "string"
                },
                "nftInfo": {
                    "$ref": "#/definitions/model.NftInfo"
                },
                "twitterID": {
                    "type": "string"
                },
                "userLevel": {
                    "type": "integer"
                },
                "userName": {
                    "type": "string"
                },
                "userScore": {
                    "type": "number"
                },
                "walletPublicKey": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
